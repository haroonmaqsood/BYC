{
  "name": "connectr",
  "version": "0.0.6",
  "description": "Connect wrapper that adds ability to insert middleware at arbitrary positions.\"",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/olalonde/connectr.git"
  },
  "website": "https://github.com/olalonde/connectr",
  "keywords": [
    "connect",
    "express"
  ],
  "author": {
    "name": "Olivier Lalonde",
    "email": "olalonde@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "~0.7.2"
  },
  "devDependencies": {
    "connect": "^2.14.4",
    "debug": "^0.7.4"
  },
  "readme": "# Connectr for [Connect](https://github.com/senchalabs/connect) (Node.js)\n\n[![NPM version](https://badge.fury.io/js/connectr.png)](http://badge.fury.io/js/connectr)\n\nConnectr is a layer on top of [Connect](https://github.com/senchalabs/connect) that allows the insertion/removal of middlewares\nafter the stack has been built. This is especially useful when you don't have access to the code that sets up your Connect stack (a third party module for example). \n\n## Install\n\n    npm install connectr\n\n## Usage\n\n```javascript\nvar connectr = require('connectr')(app);\n\n// you can also monkey patch app directly:\n// app = require('connectr').patch(app)\n\n// Add labeled middleware\nconnectr.use(middleware).as(label);\n\n// Label middleware which is at a specific position on the stack\n// This should be used only if you don't have access to the code\n// that builds the stack.\n//\n// Tip: use `app.stack` to inspect the stack\nconnectr.index(index).as(label);\n\n// Insert before middleware\nconnectr.before(label).use(middleware).as(label);\n\n// Insert after middleware\nconnectr.after(label).use(middleware);\n\n// Insert at beginning of stack\nconnectr.first().use(middleware);\n\n// Remove middleware\nconnectr.remove(label);\n\n// Assign a label to middleware already in the stack\nconnectr.index(i).as(label);\n\n// the .as, .before and .after calls are optional\n\n// have a problem? try console.log(app.stack)\n```\n\n## Simple Example\n\n```javascript\nvar connect = require('connect'),\nvar app = connect();\nvar connectr = require('connectr')(app);\n\nconnectr.use(connect.cookieParser).as('cookieParser');\n\n/* ... */\n\nconnectr.before('cookieParser').use(function (req, res, next) {\n  console.log('Before cookie parser...');\n  next();\n}).as('log before cookie parser');\n\n```\n\n## Kitchen Sink Example \n\n```javascript \nvar http = require('http'),\n  connect = require('connect'),\n  app = connect(),\n  connectr = require('connectr')(app);\n\nvar cookieParser = connect.cookieParser();\n\n// we need to manually label middlewares\ncookieParser.label = 'cookieParser';\n\napp.use(cookieParser);\n\nconnectr.before('cookieParser').use(function (req, res, next) {\n  console.log('Middleware before cookie parser.');\n  next();\n});\n\nconnectr.after('cookieParser').use(function (req, res, next) {\n  console.log('Middleware after cookie parser.');\n  next();\n});\n\n// you can also use connectr to label your middlewares\n// instead of labeling them manually as above\n\nconnectr.use(connect.bodyParser()).as('bodyParser');\n\nconnectr.use(function (req, res, next) {\n  console.log('Last middleware');       \n  res.end('Done!');\n});\n\nconnectr.before('bodyParser').use(function (req, res, next) {\n  console.log('Before body parser');\n  next();\n}).as('beforeBodyParser');\n\nconnectr.after('beforeBodyParser').use(function (req, res, next) {\n  console.log('I should be called after beforeBodyParser but before bodyParser');\n  next();\n}).as('betweenBeforeBodyParserAndBodyParser');\n\nconnectr.after('bodyParser').use(function (req, res, next) {\n  console.log('After body parser');\n  next();\n}).as('afterBodyParser');\n\n//console.log(app.stack);\n\nhttp.createServer(app).listen(3000);\n```\n\n## License\n\nMIT: [http://olalonde.mit-license.org](http://olalonde.mit-license.org)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/olalonde/connectr/issues"
  },
  "homepage": "https://github.com/olalonde/connectr",
  "_id": "connectr@0.0.6",
  "dist": {
    "shasum": "7702c85e1f92805ee5c8827b95f721e6daacce56"
  },
  "_from": "connectr@0.0.6",
  "_resolved": "https://registry.npmjs.org/connectr/-/connectr-0.0.6.tgz"
}
